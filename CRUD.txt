
# Full Stack React + Node.js + MongoDB CRUD Guide

## 🧱 Stack
- Frontend: React
- Backend: Node.js + Express.js
- Database: MongoDB (local or MongoDB Atlas)

---

## 🧩 How It Works
1. React frontend calls backend API (Express routes).
2. Express backend handles CRUD logic and talks to MongoDB using Mongoose.
3. MongoDB stores the data.

---

## 🔧 Backend Setup

### a. Create a new directory for the backend

```
mkdir backend
cd backend
npm init -y
npm install express mongoose cors dotenv
```

### b. Create `server.js`

```js
const express = require('express');
const mongoose = require('mongoose');
const cors = require('cors');
require('dotenv').config();

const app = express();
const PORT = process.env.PORT || 5000;

app.use(cors());
app.use(express.json());

mongoose.connect(process.env.MONGO_URI, { useNewUrlParser: true, useUnifiedTopology: true })
  .then(() => console.log('MongoDB connected'))
  .catch(err => console.error(err));

const userSchema = new mongoose.Schema({
  name: String,
  email: String
});
const User = mongoose.model('User', userSchema);

app.get('/users', async (req, res) => {
  const users = await User.find();
  res.json(users);
});

app.post('/users', async (req, res) => {
  const user = new User(req.body);
  await user.save();
  res.json(user);
});

app.put('/users/:id', async (req, res) => {
  const user = await User.findByIdAndUpdate(req.params.id, req.body, { new: true });
  res.json(user);
});

app.delete('/users/:id', async (req, res) => {
  await User.findByIdAndDelete(req.params.id);
  res.json({ message: 'User deleted' });
});

app.listen(PORT, () => console.log(`Server running on port ${PORT}`));
```

### c. Create `.env`

```
MONGO_URI=mongodb://localhost:27017/reactcrud
```

Or use MongoDB Atlas:
```
MONGO_URI=mongodb+srv://<username>:<password>@cluster0.mongodb.net/reactcrud?retryWrites=true&w=majority
```

### d. Run server

```
node server.js
```

## 🔧 Frontend Setup

### a. Create a new directory for the frontend

```
npx create-react-app frontend
cd frontend
npm install axios
```

Folder structure:
```
src/
  components/
    UserList.js
    UserForm.js
  App.js
```

---

### 4. Read Data (GET)

`UserList.js`:
```jsx
import React, { useEffect, useState } from 'react';
import axios from 'axios';

function UserList({ onEdit, onDelete }) {
  const [users, setUsers] = useState([]);

  useEffect(() => {
    fetchUsers();
  }, []);

  const fetchUsers = async () => {
    const response = await axios.get('http://localhost:5000/users');
    setUsers(response.data);
  };

  return (
    <div>
      <h2>Users</h2>
      {users.map(user => (
        <div key={user.id}>
          {user.name} - {user.email}
          <button onClick={() => onEdit(user)}>Edit</button>
          <button onClick={() => onDelete(user.id)}>Delete</button>
        </div>
      ))}
    </div>
  );
}

export default UserList;
```

---

### 5. Create Data (POST)

`UserForm.js`:
```jsx
import React, { useState } from 'react';
import axios from 'axios';

function UserForm({ fetchUsers }) {
  const [name, setName] = useState('');
  const [email, setEmail] = useState('');

  const handleSubmit = async e => {
    e.preventDefault();
    await axios.post('http://localhost:5000/users', { name, email });
    setName('');
    setEmail('');
    fetchUsers();
  };

  return (
    <form onSubmit={handleSubmit}>
      <input value={name} onChange={e => setName(e.target.value)} placeholder="Name" required />
      <input value={email} onChange={e => setEmail(e.target.value)} placeholder="Email" required />
      <button type="submit">Add User</button>
    </form>
  );
}

export default UserForm;
```

---

### 6. Update Data (PUT/PATCH)

Enhanced `UserForm.js`:
```jsx
function UserForm({ fetchUsers, editingUser, setEditingUser }) {
  const [name, setName] = useState(editingUser?.name || '');
  const [email, setEmail] = useState(editingUser?.email || '');

  useEffect(() => {
    if (editingUser) {
      setName(editingUser.name);
      setEmail(editingUser.email);
    }
  }, [editingUser]);

  const handleSubmit = async e => {
    e.preventDefault();
    if (editingUser) {
      await axios.put(`http://localhost:5000/users/${editingUser.id}`, { name, email });
      setEditingUser(null);
    } else {
      await axios.post('http://localhost:5000/users', { name, email });
    }
    setName('');
    setEmail('');
    fetchUsers();
  };

  return (
    <form onSubmit={handleSubmit}>
      <input value={name} onChange={e => setName(e.target.value)} required />
      <input value={email} onChange={e => setEmail(e.target.value)} required />
      <button type="submit">{editingUser ? 'Update' : 'Add'}</button>
    </form>
  );
}
```

---

### 7. Delete Data (DELETE)

In `UserList.js`:
```jsx
const handleDelete = async id => {
  await axios.delete(`http://localhost:5000/users/${id}`);
  fetchUsers();
};
```

---

### 8. Combine in `App.js`

```jsx
import React, { useState } from 'react';
import axios from 'axios';
import UserForm from './components/UserForm';
import UserList from './components/UserList';

function App() {
  const [editingUser, setEditingUser] = useState(null);
  const [refreshToggle, setRefreshToggle] = useState(false);

  const fetchUsers = () => setRefreshToggle(prev => !prev);

  const handleEdit = user => setEditingUser(user);

  const handleDelete = async id => {
    await axios.delete(`http://localhost:5000/users/${id}`);
    fetchUsers();
  };

  return (
    <div className="App">
      <UserForm
        fetchUsers={fetchUsers}
        editingUser={editingUser}
        setEditingUser={setEditingUser}
      />
      <UserList
        key={refreshToggle}
        onEdit={handleEdit}
        onDelete={handleDelete}
      />
    </div>
  );
}

export default App;
```
---

## 🧑‍💻 React Frontend Changes

Update your API URLs in React:

### a. Get Users

```js
useEffect(() => {
  axios.get('http://localhost:5000/users').then(res => setUsers(res.data));
}, []);
```

### b. Add User

```js
axios.post('http://localhost:5000/users', { name, email });
```

### c. Update User

```js
axios.put(`http://localhost:5000/users/${id}`, { name, email });
```

### d. Delete User

```js
axios.delete(`http://localhost:5000/users/${id}`);
```

---

## ✅ Folder Structure

```
project-root/
├── backend/
│   ├── server.js
│   ├── .env
│   └── models/User.js
└── frontend/
    └── (React code here)
```

---

## ✅ Bonus Tips
- Use Postman to test API endpoints.
- Use Mongoose schema validation.
- Install nodemon: `npm install -D nodemon`.
- Deploy backend with Render, Railway, or serverless via Vercel.

---

This is your full-stack React + MongoDB CRUD guide.
