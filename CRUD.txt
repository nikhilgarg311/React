
## React CRUD Guide (Create, Read, Update, Delete)

### What is CRUD?
CRUD stands for:
- **C**reate – Add new data
- **R**ead – Fetch/display data
- **U**pdate – Modify existing data
- **D**elete – Remove data

---

### What You'll Learn:

1. Project Setup
2. Creating a Simple Backend (JSON Server)
3. Creating a React App
4. Read Data (GET)
5. Create Data (POST)
6. Update Data (PUT/PATCH)
7. Delete Data (DELETE)
8. UI and State Management
9. Best Practices

---

### 1. Project Setup

**Tools:** React, JSON Server, Axios

```bash
npx create-react-app react-crud-app
cd react-crud-app
npm install axios
```

---

### 2. Setup JSON Server

```bash
npm install -g json-server
```

Create `db.json` in root:

```json
{
  "users": [
    { "id": 1, "name": "Alice", "email": "alice@example.com" },
    { "id": 2, "name": "Bob", "email": "bob@example.com" }
  ]
}
```

Start the server:

```bash
json-server --watch db.json --port 3001
```

---

### 3. Create a React App

```bash
npm start
```

Folder structure:
```
src/
  components/
    UserList.js
    UserForm.js
  App.js
```

---

### 4. Read Data (GET)

`UserList.js`:
```jsx
import React, { useEffect, useState } from 'react';
import axios from 'axios';

function UserList({ onEdit, onDelete }) {
  const [users, setUsers] = useState([]);

  useEffect(() => {
    fetchUsers();
  }, []);

  const fetchUsers = async () => {
    const response = await axios.get('http://localhost:3001/users');
    setUsers(response.data);
  };

  return (
    <div>
      <h2>Users</h2>
      {users.map(user => (
        <div key={user.id}>
          {user.name} - {user.email}
          <button onClick={() => onEdit(user)}>Edit</button>
          <button onClick={() => onDelete(user.id)}>Delete</button>
        </div>
      ))}
    </div>
  );
}

export default UserList;
```

---

### 5. Create Data (POST)

`UserForm.js`:
```jsx
import React, { useState } from 'react';
import axios from 'axios';

function UserForm({ fetchUsers }) {
  const [name, setName] = useState('');
  const [email, setEmail] = useState('');

  const handleSubmit = async e => {
    e.preventDefault();
    await axios.post('http://localhost:3001/users', { name, email });
    setName('');
    setEmail('');
    fetchUsers();
  };

  return (
    <form onSubmit={handleSubmit}>
      <input value={name} onChange={e => setName(e.target.value)} placeholder="Name" required />
      <input value={email} onChange={e => setEmail(e.target.value)} placeholder="Email" required />
      <button type="submit">Add User</button>
    </form>
  );
}

export default UserForm;
```

---

### 6. Update Data (PUT/PATCH)

Enhanced `UserForm.js`:
```jsx
function UserForm({ fetchUsers, editingUser, setEditingUser }) {
  const [name, setName] = useState(editingUser?.name || '');
  const [email, setEmail] = useState(editingUser?.email || '');

  useEffect(() => {
    if (editingUser) {
      setName(editingUser.name);
      setEmail(editingUser.email);
    }
  }, [editingUser]);

  const handleSubmit = async e => {
    e.preventDefault();
    if (editingUser) {
      await axios.put(`http://localhost:3001/users/${editingUser.id}`, { name, email });
      setEditingUser(null);
    } else {
      await axios.post('http://localhost:3001/users', { name, email });
    }
    setName('');
    setEmail('');
    fetchUsers();
  };

  return (
    <form onSubmit={handleSubmit}>
      <input value={name} onChange={e => setName(e.target.value)} required />
      <input value={email} onChange={e => setEmail(e.target.value)} required />
      <button type="submit">{editingUser ? 'Update' : 'Add'}</button>
    </form>
  );
}
```

---

### 7. Delete Data (DELETE)

In `UserList.js`:
```jsx
const handleDelete = async id => {
  await axios.delete(`http://localhost:3001/users/${id}`);
  fetchUsers();
};
```

---

### 8. Combine in `App.js`

```jsx
import React, { useState } from 'react';
import axios from 'axios';
import UserForm from './components/UserForm';
import UserList from './components/UserList';

function App() {
  const [editingUser, setEditingUser] = useState(null);
  const [refreshToggle, setRefreshToggle] = useState(false);

  const fetchUsers = () => setRefreshToggle(prev => !prev);

  const handleEdit = user => setEditingUser(user);

  const handleDelete = async id => {
    await axios.delete(`http://localhost:3001/users/${id}`);
    fetchUsers();
  };

  return (
    <div className="App">
      <UserForm
        fetchUsers={fetchUsers}
        editingUser={editingUser}
        setEditingUser={setEditingUser}
      />
      <UserList
        key={refreshToggle}
        onEdit={handleEdit}
        onDelete={handleDelete}
      />
    </div>
  );
}

export default App;
```

---

### 9. Best Practices

- Use `useEffect`/`useState` correctly
- Prefer `axios` for HTTP requests
- Extract API calls into a service file for cleaner code
- Use UI libraries like Material UI or Tailwind CSS
- Use a real backend later for production

---

This is your complete beginner-to-intermediate React CRUD guide.
